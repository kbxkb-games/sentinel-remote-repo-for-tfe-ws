import "tfplan"

# Get all AWS instances contained in all modules being used
get_aws_instances = func() {
	instances = []
	for tfplan.module_paths as path {
		instances += values(tfplan.module(path).resources.aws_instance) else []
	}
	return instances
}

# --------------------------------------------------------------------------------------
# IF YOU LOOK AT THE main.tf OFTHE ACTUAL TF CONFIG:
# 	All resources are being created by invoking "module ....".
# 	Hence the for loop above is on tfplan.module_paths, and later inside the loop, "tfplan.module(path)...."
# 	Also, "tfplan.module(path).resources.aws_instance" must be a DICTIONARY hence we use values(...) on it to just get the RHS
#
# IF YOU LOOK AT THE OUTPUT OF TF PLAN:
# 	It creates multiple resources all such strating with a line similar to: [[ resource "aws_instance" "web" { ... ]]
# 	That "aws_instance" is why we wrote "resources.aws_instance" above
#
# EXCERPT FROM downloaded mock-tfplan.sentinel:
#
# --------------------------------------------------------------------------------------
/* -------------------------------------------------------------------------------------

_modules = {
        "root": {
                "data":      {},
                "path":      [],
                "resources": {},
        },

        "module.server": {
                "data": {},
                "path": [
                        "server",
                ],
                "resources": {
                        "aws_instance": {
                                "web": {
                                        0: {
                                                "applied": {
                                                        "ami": "ami-0735ea082a1534cac",


-----------------------------------------------------------------------------------------*/

allowed_sizes = ["t2.medium"]
actual_instances = get_aws_instances()

instance_types_in_allowed_sizes = rule {
	all actual_instances as _, instances {
		all instances as numindex, lhs {
			all allowed_sizes as rhs {
				lhs.applied.instance_type contains rhs
			}
		}
	}
}

main = rule {
	instance_types_in_allowed_sizes
}
